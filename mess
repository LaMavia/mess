#!/usr/bin/env perl

use strict;
use warnings;
use warnings FATAL => 'all';
use File::Spec::Functions 'catfile';
use File::Basename;
use Cwd qw(abs_path getcwd);

sub get_config {
    # my ($file) = @_;
    # my (undef, $base) = fileparse $file;
    my $base = getcwd();
    # print "base: $base\n";
    my %config = ( do "$base/mcf.pm" );

    return \%config;
}

sub get_or {
    my ($cr, $key, $default) = @_;
    my %config = %{$cr};

    return $config{$key} ? qr/@{[$config{$key}]}/m : $default;
}

sub init_re {
    my %config = %{$_[0]};
    my %re = ();

    my %static = (
        opening => qr/\{/m,
        closing => qr/\}/m,
        pre_key => qr//m,
        assign  => qr/:/m,
        pre_var => qr/\$/m,
        class   => qr//m
    );

    foreach my $k (keys %static) {
        $re{$k} = exists($config{$k}) ? qr/@{[$config{$k}]}/m : $static{$k};
    }

    my $rop = $re{"opening"};
    my $rcl = $re{"closing"};
    my $rpk = $re{"pre_key"};
    my $ras = $re{"assign"};
    my $rva = $re{"var"};

}
my %config       = %{get_config($ARGV[0])};
my $re_opening   = get_or(\%config, "opening", q/\{/);
my $re_closing   = get_or(\%config, "closing", q/\}/);
my $re_pre_key   = get_or(\%config, "pre_key", q//);
my $re_assign    = get_or(\%config, "assign" , q/:/);
my $re_var_pre   = get_or(\%config, "pre_var", q/\$/);
my $re_class_pre = get_or(\%config, "class"  , q//);
my $re_pre_sec   = get_or(\%config, "pre_section", q/@/);
my $re_comm_line = get_or(\%config, "comment_line", qr|//|ms);
my $re_start =
  qr/^\s*$re_class_pre((?:(?!$re_pre_sec|$re_opening|$re_closing|;).)*?)\s*$re_opening/ms;
my $re_start_sec =
    qr/^\s*$re_pre_sec((?:(?!$re_opening|$re_closing|;).)*?)\s*$re_opening/ms;
my $re_identifier      = q/[^\s\(]+(?<!,)/;
my $re_identifier_list = q/\((?:\s*[^\s\(\)]+,?\s*)*\)/;
my $re_key             = qr/$re_pre_key((?:\w|~|\-|$re_var_pre|@[^s\(]+\([^\)]*\))+)/ms;
my $re_val             = q/([^;]*?)/;
my $re_kv              = qr/$re_key\s*$re_assign\s*$re_val\s*;/ms; # <key>: val; => (key, val)
my $re_white_line      = q/^\s*$/;
my $re_import          = q/@import\s*"([^"]+)";/;
my $re_var             = qr/$re_var_pre($re_identifier)/ms;
my $re_indent          = qr/[ \t]/ms;


sub process_common {
    my ( $line, $matched, $base_dir ) = @_;
    $line =~ s/^\s*$//;
    if ( $line =~ $re_comm_line ) {
        $matched += 1;
        $line =~ s|^(\s*)$re_comm_line(\s*)(.*)(\n*)$|$1/*$2$3$2*/$4|m;    
    }
    # mixins
    if ( $line =~ /@($re_identifier)/gms ) {
        my $name = $1;
        if ( $name =~ /^here$/gmi ) {
            $matched += 1;
            my $apath = abs_path($base_dir);
            $line =~ s/&here/$apath/gmi;
        }
        if ( $name =~ /^all$/gmi ) {
            $matched += 1;
            my ( $key, $val ) = ( $line =~ $re_kv );
            my ( $arg ) = ( $key =~ /\@all\s*\(([^\)]*)\)/gmi );
            $line = join ("", map { $line =~ s/\Q$key\E/$_/r } (split( /\s*,\s*/, $arg )));
        }
    }

    return ( $line, $matched );
}

sub process_start {
    my ( $line, $path ) = @_;

    my ( $name ) = ( $line =~ $re_start );
    print "[class] name='$name'\n";
    my $old_name = $name;
    $name =~ s/&/$path/;
    $line =~ s/^\n*//gms;
    $line =~ s/\Q$old_name\E/$name/;
    $line =~ s/$re_opening/{/mgs if $re_opening;
    $line =~ s/$re_class_pre//mgs if $re_class_pre;

    return ( $line, $name );
}

sub process_start_sec {
    my ( $line ) = @_;

    $line =~ s/^\n*//gms;
    $line =~ s/$re_pre_sec/@/mgs if $re_pre_sec;
    $line =~ s/$re_opening/{/mgs if $re_opening;
    $line =~ s/$re_class_pre//mgs if $re_class_pre;

    return $line;
}

sub process_class {
    my ( $fst_line, $src, $name, $base_dir, $block_indent ) = @_;
    my ($base_indent) = ( $fst_line =~ /^($re_indent*)/gms );

    my $out  = $fst_line;
    my $line = "";
    my @children = ();
    my $in = 0;

    if ( $out =~ $re_closing ) {
        return $out;
    }

    while ( my $_line = <$src> ) {
        $line .= $_line;
        my $matched = 0;
        my ( $indent ) = ( $line =~ qr/^($re_indent*)/ );
        if ( not $indent ) { $indent = ""; }

        if ( $line =~ $re_start ) {
            ( $line, my $next_name ) = process_start( $line, $name );
            my $s = process_class(
                    $line,
                    $src, $next_name, $base_dir,
                    $base_indent
                );

            # $s =~ s/^\n*//gms;
            # print ("matches?: " . ($line =~ /^\n+/) . "\n");
            # print "s=\n$s\n";

            push(
                @children,
                $s
            );

            $out =~ s/\s$/\n/gsm;
            $line = "";
        }
        if ( $line =~ $re_start_sec ) {
            $matched += 1;
            $out .= process_section( 
                process_start_sec( $line ), 
                $src, 
                $base_dir 
            );
            $line = "";

            $in += 1;
        }
        if ( $line =~ $re_closing ) {
            $matched += 1;
            $line =~ s/^$re_closing\s*/}\n/gms if $re_closing;
            $in -= 1;
            if ($in <= 0) {
                $out .= $line;
                $block_indent =~ s/^$block_indent//gms;
                $line = "";
                last;
            }
        }

        # vars
        if ( $line =~ $re_kv ) {
            $matched += 1;
            my $key = ( my $old_key = $1 );
            my $val = ( my $old_val = $2 );

            $key =~ s/$re_var/--$1/gms;
            $val =~ s/$re_var/var(--$1)/gms;

            $line =~ s/\Q$old_key\E/$key/;
            $line =~ s/\Q$old_val\E/$val/;
            $line =~ s/$re_assign/:/gms if $re_assign;
        }

        ( $line, $matched ) = process_common( $line, $matched, $base_dir );

        if ($matched) {
            $matched = 0;
            $out .= $line;
            $line = "";
        }
    }

    $out .= $line;

    my ($indent) = ($out =~ /^($re_indent*)/gm);
    print("children:\n" . (join "", @children) . "\n");
    for (@children) {
        my ($line_indent) = ($_ =~ /^($re_indent*)/);
        print "line:\n$_;line_indent='$line_indent', indent='$indent'\n";
        $_ =~ s/^$line_indent/$indent/gm;
        $out = $out . "\n" . $_;
    }

    return $out;
}

sub process_section {
    my ($fst_line, $src, $base_dir) = @_;
    my $out = $fst_line;
    my $line = "";
    my $matched = 0;
    my ($fst_indent) = ($fst_line =~ /^(\s*)/);
    if ( not $fst_indent ) {
        $fst_indent = "";
    }

    while (my $_line = <$src>) {
        $line .= $_line;
        my ($indent) = ($line =~ /^(\s*)/);
        if ( not $indent ) {
            $indent = "";
        }

        if ( $line =~ $re_start ) {
            my $next_name;
            ( $line, $next_name ) = process_start( $line, "" );
            $line = process_class( $line, $src, $next_name, $base_dir, $indent );
            $out .= $line;
            $line = "";
            $matched += 1;
        }

        if ( $line =~ $re_start_sec ) {
            $matched += 1;
            $line = process_start_sec( $line );
            $line = process_section( $line, $src, $base_dir );
            $line =~ s/^/$indent/gms;
            $out .= $line;
            $line = "";
        }

        if ( $line =~ $re_closing ) {
            $matched += 1;
            $line =~ s/$re_closing\s*/}\n/gms if $re_closing;
            $out .= $line;
            $line = "";
            last;
        }

        ( $line, $matched ) = process_common( $line, $matched, $base_dir );

        if ( $matched ) {
            $out .= $line;
            $line = "";
            $matched = 0;
        }
    }

    return $out . $line;
}

sub process_file {
    my ($file, $save) = @_;
    my $out_file      = ( $file =~ s/\.mss/.css/r );
    my $out           = "";
    my $block_indent  = "";
    my $matched       = 0;
    my $in            = 0;

    my ( undef, $base_dir ) = fileparse($file);
    open( my $src,  '<', $file )     or die "Could not open $file: $!";
    open( my $dist, '>', $out_file ) or die $! if $save;

    while ( my $line = <$src> ) {
        my ( $indent ) = ($line =~ /^($re_indent*)/);

        if ( not $indent ) {
            $indent = "";
        }
        # imports
        if ( $line =~ $re_import ) {
            my $name = $1;
            my $path = catfile( $base_dir, $name );
            # printf "importing %s\n", $path;
            my $res = process_file($path, 0);
            $line =~ s/$re_import/$res/;
            $line =~ s/\n*$/\n/s;

            $out =~ s/\n+$/\n\n/s;
            $out .= "/* start: $path */\n\n" . $line . "\n/* end: $path */\n";
            $line = "";
        }

        if ( $line =~ $re_start ) {
            my $next_name;
            ( $line, $next_name ) = process_start( $line, "" );
            $out .= process_class( $indent . $line, $src, $next_name, $base_dir, $block_indent );
            $line = "";
            $matched += 1;
        }

        if ( $line =~ $re_start_sec ) {
            $matched += 1;
            $out .= process_section( 
                process_start_sec( $line ), 
                $src, $base_dir 
            );
            $line = "";
            $in += 1;
        }

        if ( $line =~ $re_closing ) {
            $matched += 1;
            $line =~ s/$re_closing$re_indent*/}\n/gms if $re_closing;
            $in -= 1;
            if ($in <= 0) {
                $out .= $line;
                $out =~ s/^/$block_indent/gm;
                $block_indent =~ s/^$block_indent//;
                $line = "";
                last;
            }
        }

        ( $line, $matched ) = process_common( $line, $matched, $base_dir );

        $out .= $line;
    }

    print $dist $out if $save;

    close $src;
    close $dist if $save;
    return $out;
}

process_file(@ARGV, 1);
